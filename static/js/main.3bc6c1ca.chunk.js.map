{"version":3,"sources":["App.module.css","components/Ship.module.css","components/StarShip.module.css","styles/images/logo.svg","reducers/app-reducer.ts","api/api.ts","reducers/film-reducer.ts","components/InputComponent.tsx","components/Ship.tsx","components/StarShipsList.tsx","App.tsx","store.ts","index.tsx"],"names":["module","exports","initialState","status","error","setAppErrorAC","type","setAppStatusAC","instance","axios","create","baseURL","starShipsAPI","url","get","then","res","data","film5API","starShips","starShipsInfo","InputComponent","React","memo","value","onChange","Checkbox","color","checked","readOnly","Ship","info","mode","isSortedValue","index","dispatch","useDispatch","nameStyle","ship","firstName","name","className","wrapper","shipHasBeenChecked","urlAsID","crew","length","passengers","max_atmosphering_speed","ShipsList","useSelector","state","app","links","film5","shipsInfo","useState","runOnce","setRunOnce","comparisonMode","setComparisonMode","optionValue","setOptionValue","useEffect","a","starships","message","map","el","vehicle","created","selectedVehicle","sortBy","sort","b","sorted","style","position","top","textAlign","width","CircularProgress","p","Button","variant","onClick","prev","NativeSelect","e","target","App","photo","src","logo","alt","rootReducer","combineReducers","action","MGLT","cargo_capacity","consumables","cost_in_credits","edited","films","hyperdrive_rating","manufacturer","model","pilots","starship_class","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bc6c1ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__32GuK\",\"p\":\"App_p__r6Q2w\",\"photo\":\"App_photo__2Phsf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Ship_wrapper__2bt59\",\"firstName\":\"Ship_firstName__3E9P-\",\"name\":\"Ship_name__3rocb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"p\":\"StarShip_p__3kmC7\"};","export default __webpack_public_path__ + \"static/media/logo.01fde873.svg\";","\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default:\n            return {...state}\n    }\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\n\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n\n","import axios from 'axios'\n\n\n// Create instance\nconst instance = axios.create({\n    baseURL: 'https://swapi.dev/api'\n})\n\n\n// API\nexport const starShipsAPI = {\n    getStarShips(url: string): Promise<string>  {\n        return axios.get<string>(url).then(res => {\n          return res.data\n        });\n    }\n}\n\nexport const film5API = {\n    getFilm5API() {\n        const promise = instance.get<ResponseFilmsType>('/films/5/');\n        return promise;\n    }\n}\n\n// types\nexport type ResponseFilmsType = {\n    title: string,\n    episode_id: number,\n    opening_crawl: string,\n    director: string,\n    producer: string,\n    release_date: string,\n    characters: string[],\n    planets: string[],\n    starships: string[],\n    vehicles: string[],\n    species: string[],\n    created: string,\n    edited: string,\n    url: string\n}\n\n\n\n","import {Dispatch} from 'redux';\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {film5API, starShipsAPI} from \"../api/api\";\r\nimport {StarShipType} from \"./Types\";\r\n\r\nconst initialState = {\r\n    status: '',\r\n    data: '',\r\n    starShips: [] as string[],\r\n    starShipsInfo: [] as StarShipType[]\r\n}\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nexport const film5Reducer = (state: InitStateType = initialState, action: ActionsType): InitStateType  => {\r\n    switch (action.type) {\r\n        case 'GET_FILM5': {\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        }\r\n        case 'GET_STARSHIPS_LINKS': {\r\n            return {\r\n                ...state,\r\n                starShips: action.data\r\n            }\r\n        }\r\n        case 'GET_ONE_STARSHIP': {\r\n            const data = {\r\n                MGLT: action.data.MGLT,\r\n                cargo_capacity: action.data.cargo_capacity,\r\n                consumables: action.data.consumables,\r\n                cost_in_credits: action.data.cost_in_credits,\r\n                created: action.data.created,\r\n                crew: action.data.crew,\r\n                edited: action.data.edited,\r\n                films: action.data.films,\r\n                hyperdrive_rating: action.data.hyperdrive_rating,\r\n                length: action.data.length,\r\n                manufacturer: action.data.manufacturer,\r\n                max_atmosphering_speed: action.data.max_atmosphering_speed,\r\n                model: action.data.model,\r\n                name: action.data.name,\r\n                passengers: action.data.passengers,\r\n                pilots: action.data.pilots,\r\n                starship_class: action.data.starship_class,\r\n                url: action.data.url,\r\n                shipHasBeenChecked: false\r\n            }\r\n            return {\r\n                ...state,\r\n                starShipsInfo: [\r\n                    ...state.starShipsInfo,\r\n                    data\r\n                ]\r\n            }\r\n        }\r\n        case 'GET_CHECKED_STARSHIP': {\r\n            const data = state.starShipsInfo.map((el: StarShipType) => {\r\n                return el.url === action.data ? {...el, shipHasBeenChecked: !el.shipHasBeenChecked} : el\r\n            })\r\n            return {\r\n                ...state,\r\n                starShipsInfo: data\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const getFilm5AC = (data: string) => ({type: 'GET_FILM5', data} as const);\r\nexport const getStarShipsLinksAC = (data: string[]) => ({type: 'GET_STARSHIPS_LINKS', data} as const);\r\nexport const getOneStarShipAC = (data: any) => ({type: 'GET_ONE_STARSHIP', data} as const);\r\nexport const getCheckedStarShipAC = (data: string) => ({type: 'GET_CHECKED_STARSHIP', data} as const);\r\n\r\n// thunks\r\nexport const getStarShipsLinksTC = () => async (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res= await film5API.getFilm5API()\r\n            dispatch(getStarShipsLinksAC(res.data.starships))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch(error) {\r\n            dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n}\r\n\r\nexport const getOneStarShipTC = (url: string) => async (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await starShipsAPI.getStarShips(url)\r\n        dispatch(getOneStarShipAC(res))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof getFilm5AC>\r\n    | ReturnType<typeof getStarShipsLinksAC>\r\n    | ReturnType<typeof getOneStarShipAC>\r\n    | ReturnType<typeof getCheckedStarShipAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType  | SetAppStatusActionType >","import React from 'react';\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    value: string | boolean\r\n    onChange: () => void\r\n}\r\n\r\nexport const InputComponent: React.FC<PropsType> = React.memo(({value, onChange}) => {\r\n    return (\r\n        <Checkbox\r\n            color=\"primary\"\r\n            checked={!!value}\r\n            onChange={onChange}\r\n            readOnly={false}\r\n        />\r\n    )\r\n})\r\n","import React from 'react';\r\nimport ship from './Ship.module.css'\r\nimport {getCheckedStarShipAC} from \"../reducers/film-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {InputComponent} from \"./InputComponent\";\r\nimport {StarShipType} from \"../reducers/Types\";\r\n\r\ntype PropsType = {\r\n    info: StarShipType\r\n    mode: boolean\r\n    isSortedValue: boolean\r\n    index?: number\r\n}\r\nexport const Ship: React.FC<PropsType> = React.memo(({info, mode, isSortedValue, index}) => {\r\n    const dispatch = useDispatch()\r\n    const setShipChecked = (urlAsID: string) => {\r\n        dispatch(getCheckedStarShipAC(urlAsID))\r\n    }\r\n\r\n    if (!info) {\r\n        return <>Loading...</>\r\n    }\r\n\r\n     const nameStyle = isSortedValue && index === 0 ? ship.firstName : ship.name;\r\n\r\n    return (\r\n        <div className={ship.wrapper}>\r\n            <div><InputComponent value={info.shipHasBeenChecked} onChange={() => setShipChecked(info.url)}/>\r\n                name: <b>{info?.name}</b>\r\n            </div>\r\n            {mode ? <div className={nameStyle}>\r\n                    <div>crew: <b>{info?.crew}</b></div>\r\n                    <div>length: <b>{info?.length}</b></div>\r\n                    <div>passengers: <b>{info?.passengers}</b></div>\r\n                    <div>max_atmosphering_speed: <b>{info?.max_atmosphering_speed}</b></div>\r\n                </div>\r\n                : ''}\r\n        </div>\r\n    );\r\n})","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport style from './StarShip.module.css'\r\nimport {getOneStarShipTC, getStarShipsLinksTC} from \"../reducers/film-reducer\";\r\nimport {StarShipType} from \"../reducers/Types\";\r\nimport {Ship} from \"./Ship\";\r\nimport {RequestStatusType} from \"../reducers/app-reducer\";\r\nimport {Button, CircularProgress, NativeSelect, } from \"@material-ui/core\";\r\n\r\nexport const ShipsList = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const links = useSelector<AppRootStateType, string[]>(state => state.film5.starShips)\r\n    const shipsInfo = useSelector<AppRootStateType, StarShipType[]>(state => state.film5.starShipsInfo)\r\n    const [runOnce, setRunOnce] = useState(true)\r\n    const [comparisonMode, setComparisonMode] = useState(false)\r\n    const [optionValue, setOptionValue] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        dispatch(getStarShipsLinksTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (links.length && runOnce) {\r\n            links.map((el) => {\r\n                return dispatch(getOneStarShipTC(el))\r\n            })\r\n            return setRunOnce(false)\r\n        }\r\n    }, [links, dispatch, runOnce, setRunOnce])\r\n\r\n    // Get unpicked StarShips\r\n    const vehicle = shipsInfo?.map((el: StarShipType) => {\r\n        return (\r\n            <div key={el.created}>\r\n                <Ship isSortedValue={false} info={el} mode={comparisonMode}/>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setOptionValue(e.target.value)\r\n    }\r\n\r\n    const sorted = (sortBy: string) => { // Get sorted StarSips`s characters from max to min value\r\n        if (shipsInfo) {\r\n            switch (sortBy) {\r\n                case(\"Crew\"):\r\n                    return shipsInfo.sort((a: StarShipType, b: StarShipType) => +b.crew - +a.crew)\r\n                case(\"Length\"):\r\n                    return shipsInfo.sort((a: StarShipType, b: StarShipType) => +b.length - +a.length)\r\n                case(\"Passengers\"):\r\n                    return shipsInfo.sort((a: StarShipType, b: StarShipType) => +b.passengers - +a.passengers)\r\n                case(\"Max_speed\"):\r\n                    return shipsInfo.sort((a: StarShipType, b: StarShipType) => +b.max_atmosphering_speed - +a.max_atmosphering_speed)\r\n                default:\r\n                    return shipsInfo\r\n            }\r\n        }\r\n        return\r\n    }\r\n    // Get picked StarShips for comparison\r\n    const selectedVehicle = sorted(optionValue)?.map((el: StarShipType, index) => {\r\n        if (el.shipHasBeenChecked) {\r\n            return (\r\n                <div key={el.created}>\r\n                    <Ship isSortedValue index={index} info={el} mode={comparisonMode}/>\r\n                </div>\r\n            )\r\n        }\r\n        return null\r\n    })\r\n\r\n    //Loading circle\r\n    if (status === 'loading') {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.p}>All StarShips from film №5</div>\r\n            {comparisonMode ? selectedVehicle : vehicle}\r\n            <Button variant=\"contained\" color= {!comparisonMode ? \"primary\" : \"secondary\" }\r\n                    onClick={() => setComparisonMode((prev: boolean) => !prev)}>\r\n                {!comparisonMode ? \"Compare picked StarShips by\" : \"Go Back\"}\r\n            </Button>\r\n            <NativeSelect variant='filled' onChange={handleChange}>\r\n                <option value=\"Crew\">Crew</option>\r\n                <option value=\"Length\">Length</option>\r\n                <option value=\"Passengers\">Passengers</option>\r\n                <option value=\"Max_speed\">Max_speed</option>\r\n            </NativeSelect>\r\n        </div>\r\n    )\r\n})","import React from 'react';\nimport logo from \"./styles/images/logo.svg\"\nimport app from \"./App.module.css\"\nimport {ShipsList} from \"./components/StarShipsList\";\n\n\nfunction App() {\n     return (\n        <div className={app.wrapper}>\n            <div>\n                <img className={app.photo} src={logo} alt=\"\"/>\n                <p className={app.p}>May the force be with you</p>\n            </div>\n            <ShipsList/>\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from \"./reducers/app-reducer\";\nimport {film5Reducer} from \"./reducers/film-reducer\";\n\n\nconst rootReducer = combineReducers({\n     film5: film5Reducer,\n     app: appReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}